apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply from: "$project.rootDir/tools/findbugs.gradle"
apply from: "$project.rootDir/tools/checkstyle.gradle"
apply from: "$project.rootDir/tools/pmd.gradle"

android {
    signingConfigs {
        release
    }

    Properties props = new Properties()
    def propFile = file('../keystore.properties')
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

            signingConfigs.release.storeFile = file(props['STORE_FILE'])
            signingConfigs.release.storePassword = props['STORE_PASSWORD']
            signingConfigs.release.keyAlias = props['KEY_ALIAS']
            signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        }
    }

    def versionMajor = versions.major as int
    def versionMinor = versions.minor as int
    def versionPatch = versions.patch as int
    def versionBuild = versions.build as int

    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "com.moggot.findmycarlocation"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1000 * (1000 * versionMajor + 100 * versionMinor + versionPatch) + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            versionNameSuffix "-release"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            versionNameSuffix "-debug"
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation libraries.supportAppCompat
    implementation libraries.supportDesign
    implementation libraries.constraintLayout

    implementation libraries.googlePlayMap
    implementation libraries.googlePlayAnalytics
    implementation libraries.googlePlayLocation

    implementation libraries.firebaseCore
    implementation libraries.firebaseAds

    implementation libraries.rxJava
    implementation libraries.rxAndroid
    implementation libraries.rxLocation

    implementation libraries.timber

    implementation libraries.retrofit
    implementation libraries.retrofitConverter
    implementation libraries.retrofitAdapter
    implementation libraries.okhttpInterceptor

    implementation libraries.mapUtils

    implementation libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler

    implementation libraries.dagger
    annotationProcessor libraries.daggerCompiler

    debugImplementation libraries.leakCanaryDebug
    releaseImplementation libraries.leakCanaryRelease

    implementation(libraries.crashlytics) {
        transitive = true
    }
}

apply plugin: 'com.google.gms.google-services'
